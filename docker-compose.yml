version: '3.3'

services:
  jupyter:
    image: $NB_NAME:latest
    container_name: $NB_NAME
    env_file: .env
    build:
      context: ../toxic-comments/docker/jupyter/
      dockerfile: Dockerfile
      args:
        - ML_USER=$ML_USER
        - UID=$UID
        - GID=$GID
        - WORKSPACE_FOLDER=$WORKSPACE_FOLDER
        - MLRUNS_PATH=$MLRUNS_PATH
    ports:
      - "$NB_PORT:8888"
    volumes:
      - ../toxic-comments/config:/home/$ML_USER/$WORKSPACE_FOLDER/config
      - ../toxic-comments/data:/home/$ML_USER/$WORKSPACE_FOLDER/data
      - ../toxic-comments/notebook:/home/$ML_USER/$WORKSPACE_FOLDER/notebooks
      - ../toxic-comments/src:/home/$ML_USER/$WORKSPACE_FOLDER/src
      - ../toxic-comments/embeddings:/home/$ML_USER/$WORKSPACE_FOLDER/embeddings
      - ../toxic-comments/saved_models:/home/$ML_USER/$WORKSPACE_FOLDER/saved_models
    networks:
      - toxic-network
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    tty: true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  mlflow:
    image: mlflow
    container_name: $MLFLOW_NAME
    build:
      context: ../mlflow/docker/
      dockerfile: mlflow.df
    env_file: .env
    ports:
      - "$MLFLOW_PORT:5000"
    depends_on:
      - postgres
    networks:
      - toxic-network
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://${MINIO_SERVER_NAME}:${MINIO_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        
  postgres:
    image: postgres
    container_name: $POSTGRES_NAME
    env_file: .env
    ports:
      - "$POSTGRES_PORT:5432"
    volumes:
      - ../mlflow/postgresql/data:/var/lib/postgresql/data
    networks:
      - toxic-network
    environment:
      - POSTGRES_DB=$MLFLOW_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD

  minio-server:
    image: minio/minio
    # user: root
    container_name: ${MINIO_SERVER_NAME}
    networks:
      - toxic-network
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}

  minio-client:
    image: minio/mc
    container_name: ${MINIO_CLIENT_NAME}
    env_file: .env
    networks:
      - toxic-network
    depends_on:
      - minio-server
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set ${MINIO_SERVER_NAME} http://${MINIO_SERVER_NAME}:${MINIO_PORT} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb ${MINIO_SERVER_NAME}/${MLFLOW_BUCKET_NAME} --ignore-existing;
      /usr/bin/mc anonymous set public ${MINIO_SERVER_NAME}/${MLFLOW_BUCKET_NAME};
      exit 0;
      "

networks:
  toxic-network:

volumes:
  postgres:
  minio_data:
    driver: local
